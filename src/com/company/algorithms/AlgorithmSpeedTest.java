package com.company.algorithms;

public class AlgorithmSpeedTest {

    private static int[] smallInput = {1,3,4,5,3,21,34,54};
    private static int[] mediumInput = {1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65};
    private static int[] bigInput = {1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65,
            1,3,4,5,3,21,34,54,45,53,54,5,3,5,6,3,65778,54,32,3,5,6,34,3,5,76,4,3,4,6,5,43,345,65};


    private static int[] sorted_smallinput = {1,2,3,4,5,6,7,8,9,10,11};
    private static int[] sorted_big_input = {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
    3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,
            10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10};


    private static QuickSort quickSort = new QuickSort();
    private static Insertion insertion = new Insertion();
    private static MergeSort mergeSort = new MergeSort();

    public static void main(String[] args) {
        int[] input1 = sorted_big_input;
        int[] input2 = smallInput;
        int[] input3 = sorted_big_input;

        long startTime = System.nanoTime();
        insertion.insertionSort(input1);
        long endTime = System.nanoTime();
        long totalTime = endTime - startTime;
        System.out.println("insertion: " + totalTime + " nanoTime");

//        long startTime2 = System.nanoTime();
//        mergeSort.mergeSort(input1);
//        long endTime2 = System.nanoTime();
//        long totalTime2 = endTime2 - startTime2;
//        System.out.println("mergesort: " + totalTime2 + " nanoTime");

        long startTime3 = System.nanoTime();
        quickSort.quickSort(input3);
        long endTime3 = System.nanoTime();
        long totalTime3 = endTime3 - startTime3;
        System.out.println("quicksort: " + totalTime3 + " nanoTime");
    }
}
